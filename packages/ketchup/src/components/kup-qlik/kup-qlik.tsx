import { Component, Prop, h} from '@stencil/core';
import qApp from './qApp';
import { QlikServer } from './kup-qlik-declarations'

@Component({
  tag: 'kup-qlik',
  styleUrls: ['kup-qlik.css'],
  shadow: false
})
export class KupQlik {
  
  @Prop() config: QlikServer
  @Prop() appid: string = '';
  @Prop() obj: string = '';
  
  

  /* @Element() private element: HTMLElement; */

  qMatrix = null
  isload = false
  app = null


  
  private divref:HTMLDivElement

  constructor(){
    /* this.config = {host:'itcldsrv017', port:'80', prefix:'', isSecure:false} */
  }


  setCapabilityApisJS() {
    return new Promise((resolve) => {
      const capabilityApisJS = document.createElement('script');
      const prefix = (this.config.prefix !== '') ? `/${this.config.prefix}` : '';
      capabilityApisJS.src = `${(this.config.isSecure ? 'https://' : 'http://') + this.config.host + (this.config.port ? `:${this.config.port}` : '') + prefix}/resources/assets/external/requirejs/require.js`;
      document.head.appendChild(capabilityApisJS);
      capabilityApisJS.onload = () => { resolve('Caricato capabilityApisJS!!'); };
    });
  }

  setCapabilityApisCSS(){
    return new Promise((resolve) => {
      const capabilityApisCSS = document.createElement('link');
      const prefix = (this.config.prefix !== '') ? `/${this.config.prefix}` : '';
      capabilityApisCSS.href = `${(this.config.isSecure ? 'https://' : 'http://') + this.config.host + (this.config.port ? `:${this.config.port}` : '') + prefix}/resources/autogenerated/qlik-styles.css`;
      capabilityApisCSS.type = 'text/css';
      capabilityApisCSS.rel = 'stylesheet';
      document.head.appendChild(capabilityApisCSS);
      capabilityApisCSS.onload = () => { resolve('Caricato capabilityApisCSS!!'); };
    });
  }
  
  loadApp(){
    return new Promise((resolve) => {
      if(!this.isload){
        this.setCapabilityApisJS().then((x)=>{
          console.log(x)
          this.setCapabilityApisCSS().then((x)=>{
            console.log(x)
            qApp(this.config,this.appid).then((app)=>{
              this.app = app
              this.isload = true
              resolve(true)
            })        
          })
        })   
      }
      else
      resolve(true)
    })
      
    
  }

  componentDidLoad(){
    this.loadApp().then(()=>{
      Promise.all([
        this.app.field('Anno').select([0], true, true),
        this.app.field('Anno').getData()
      ]).then((x)=>{
        console.log(x)
        Promise.all([	
          this.app.getObject(this.divref, this.obj), 
        ])
      })      
    })
  }

  
  render() {
      return (
        <div>
          <div ref={(el: HTMLDivElement) => (this.divref = el)} class="qvobject"></div>
        </div>      
      );    
  }
}
