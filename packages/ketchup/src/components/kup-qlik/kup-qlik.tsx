import { Component, Prop, h, State} from '@stencil/core';
import qApp from './qApp';
import { QlikServer, KupQlikGrid } from './kup-qlik-declarations'

@Component({
  tag: 'kup-qlik',
  styleUrls: ['kup-qlik.scss'],
  shadow: false
})
export class KupQlik {
  
  @Prop() config: QlikServer
  @Prop() appid: string = '';
  @Prop() grid: Array<KupQlikGrid> = [];

  /* Style prop */
  @Prop() fluid:  boolean = false
  @Prop() bordered: boolean = false

  @State() divlist: Array<object> = [];
  
  

  /* @Element() private element: HTMLElement; */

  private isload = false
  private app = null
   
  setCapabilityApisJS() {
    return new Promise((resolve) => {
      const capabilityApisJS = document.createElement('script');
      const prefix = (this.config.prefix !== '') ? `/${this.config.prefix}` : '';
      capabilityApisJS.src = `${(this.config.isSecure ? 'https://' : 'http://') + this.config.host + (this.config.port ? `:${this.config.port}` : '') + prefix}/resources/assets/external/requirejs/require.js`;
      document.head.appendChild(capabilityApisJS);
      capabilityApisJS.onload = () => { resolve('Caricato capabilityApisJS!!'); };
    });
  }

  setCapabilityApisCSS(){
    return new Promise((resolve) => {
      const capabilityApisCSS = document.createElement('link');
      const prefix = (this.config.prefix !== '') ? `/${this.config.prefix}` : '';
      capabilityApisCSS.href = `${(this.config.isSecure ? 'https://' : 'http://') + this.config.host + (this.config.port ? `:${this.config.port}` : '') + prefix}/resources/autogenerated/qlik-styles.css`;
      capabilityApisCSS.type = 'text/css';
      capabilityApisCSS.rel = 'stylesheet';
      document.head.appendChild(capabilityApisCSS);
      capabilityApisCSS.onload = () => { resolve('Caricato capabilityApisCSS!!'); };
    });
  }
  
  loadApp(){
    return new Promise((resolve) => {
      if(!this.isload){
        this.setCapabilityApisJS().then((x)=>{
          console.log(x)
          this.setCapabilityApisCSS().then((x)=>{
            console.log(x)
            qApp(this.config,this.appid).then((app)=>{
              this.app = app
              this.isload = true
              resolve(true)
            })        
          })
        })   
      }
      else
      resolve(true)
    })   
  }

  getObjects(grid){
    return new Promise((resolve)=>{
      grid.forEach(element => {
        this.app.getObject(element.obj, element.obj)
      });
      resolve(true)
    })
  }

  setDivList(grid){
    return new Promise((resolve)=>{
      grid.forEach(element => {
        let style = 'qvobject '
        if(this.bordered) {
          style = style + 'bordered '
        }          

        style = style + 'col-'+element.colDim 
        this.divlist.push(<div id={element.obj} class={style}></div>)     
      });
      
      resolve(true)
    })
  }

  componentDidLoad(){
    this.loadApp().then(()=>{
      this.getObjects(this.grid)
/*       Promise.all([
        this.app.field('Anno').select([0], true, true)
      ]).then((x)=>{
        console.log(x)
        Promise.all(this.test)
      })    */   
    })
  }

  componentWillRender(){
    this.setDivList(this.grid)
  }

  
  render() {
    let classLayout = null
    let layoutStyle = null;

    if(this.fluid){
      classLayout = {
        ['kup-qlik-container-fluid']: true,
      }; 
    }
    else{
      classLayout = {
        ['kup-qlik-container']: true,
      };
    }

    layoutStyle = {
      ['--lyo_obj-height']: '400px',
    };

    return (
      <div class={classLayout} style={layoutStyle}>
        <div class="kup-qlik-row">
          {this.divlist}
        </div>       
      </div>      
    );    
  }
}


{/* <div ref={(el: HTMLDivElement) => (this.divref = el)} class="qvobject"></div> */}