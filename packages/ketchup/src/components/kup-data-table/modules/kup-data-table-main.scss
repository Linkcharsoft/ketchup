/* Class to put the table in "width auto" mode: in this way, if all visible columns have a fixed size,
     * the table automatically has a size equal to the sum of the sizes all columns.
     * Additionally it must remove the min width specification to allow a correct sizing.
     * [column-width-related][mandatory]
     *
     * The property "table-layout" is mandatory to override the default algorithm by which the browsers renders the tables.
     * This algorithm simply tries to adjust the table cell width to fit its content as best as it can.
     * But this is in contrast with having specified widths for the cells.
     * However, Firefox has a rendering error when "table-layout: fixed" and "width: -moz-fit-content;" are set on a table
     * at the same time and there is even one column with no specified size: that column automatically gets the maximum width
     * the browser itself can withstand. In contrast with V8 browsers, where the table is rendered correctly.
     * Vice versa, by not using the "table-layout: fixed", Firefox renders correctly the table while V8 doesn't.
     * In addition, there are also other size cases where there are similar rendering errors.
     * Currently the most convenient solution that I've found is to manually set the desired max and min widths on all the
     * cells of single column, if that column must have a given size.
     *
     * NOTES:
     * [1] - If we do not place these properties in the correct order, on Firefox we will find that the
     *     tables takes the whole available place, therefore fixed sizes are not respected.
     * [2] - On the contrary, without using these properties, V8 browsers will not understand that the table must have
     *     the width equal to the sum of all columns widths.
     * [3] - Mandatory for width property to take effect.
     */

table {
  border-collapse: collapse;
  color: rgb(var(--kup-text-color));
  font-size: var(--kup-font-size);
  min-width: intrinsic; /* Safari/WebKit uses a non-standard name */
  min-width: -moz-max-content; /* Firefox/Gecko */
  min-width: -webkit-max-content; /* Chrome */
  text-align: left;
  width: 100%;

  &.auto-width {
    min-width: auto; // [mandatory] See [1] [2]
    width: 0; // [mandatory] See [1] [2]
  }

  &.custom-size th {
    position: sticky;
    top: 0;
    z-index: 1;
  }

  &.row-separation > tbody > tr {
    border-bottom: 1px solid rgb(var(--kup-border-color));
  }

  &.column-separation > tbody > tr > td {
    border-right: 1px solid rgb(var(--kup-border-color));
  }

  &.noGrid {
    &,
    td {
      border: none;
    }
  }

  tfoot {
    td {
      text-align: right;
      font-weight: bold;
      padding: 0.5rem 0.3125rem;
    }
  }
}

#global-filter {
  margin-bottom: 0.5rem;
  text-align: center;
}

.icon-container {
  float: left;
  background-color: rgb(var(--kup-title-color));
  margin: 0 0.25rem;
  height: 1.25rem;
  width: 1.25rem;

  &.ascending {
    mask: url(/assets/svg/arrow_drop_up.svg) center center no-repeat;
  }

  &.collapsed {
    mask: url(/assets/svg/menu-right.svg) center center no-repeat;
  }

  &.descending,
  &.expanded {
    mask: url(/assets/svg/arrow_drop_down.svg) center center no-repeat;
  }

  &.filter-remove {
    margin: 0;
    margin-left: 0.25rem;
    float: right;
    mask: url(/assets/svg/filter-remove.svg) center center no-repeat;
    &:hover {
      opacity: 0.75;
    }
  }
}

.below-wrapper {
  height: auto;
  overflow: auto;
  &.custom-size {
    overflow: unset;
  }
  &:not(.custom-size) {
    overflow-x: auto;
  }
}

.density- {
  kup-lazy.to-be-loaded {
    height: 36px;
  }

  &dense {
    tbody > tr > td:not(.is-graphic) {
      padding-top: 0.2rem;
      padding-bottom: 0.2rem;
    }
    tbody > tr.group > td {
      padding-top: 0.25rem;
      padding-bottom: 0.25rem;
    }
    kup-lazy.to-be-loaded {
      height: 26px;
    }
  }

  &wide {
    tbody > tr > td:not(.is-graphic) {
      padding-top: 1rem;
      padding-bottom: 1rem;
    }
    tbody > tr.group > td {
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
    }
    kup-lazy.to-be-loaded {
      height: 50px;
    }
  }
}

.fontsize- {
  &small {
    font-size: calc(var(--kup-font-size) * 0.75);
    transition: font-size 0.1s;

    .group-cell-content {
      > span {
        &:before {
          font-size: calc(var(--kup-font-size) * 1) !important;
        }
      }
    }
  }

  &big {
    font-size: calc(var(--kup-font-size) * 1.25);
    transition: font-size 0.1s;

    .group-cell-content {
      > span {
        &:before {
          font-size: calc(var(--kup-font-size) * 1.5) !important;
        }
      }
    }
  }
}
